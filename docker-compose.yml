services:
  app:
    image: obnoxieux/animal-fact:latest
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      PG_DSN: ${PG_DSN}
    networks:
      - proxy
      - db-isolated
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.facts.rule=Host(`facts.obnx.dev`)"
      - "traefik.http.routers.facts.entrypoints=websecure"
      - "traefik.http.routers.facts.tls.certresolver=letsEncrypt"

  database:
    image: postgres
    command: postgres -c listen_addresses='*'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
    networks:
      - db-isolated
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always

networks:
  proxy:
    external: true
  db-isolated:

volumes:
  pg_data: